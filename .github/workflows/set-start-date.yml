name: Set Start Date in GitHub Project
on:
  issues:
    types: [opened]

jobs:
  update-project-field:
    runs-on: ubuntu-latest
    steps:
      - name: Set Start Date in GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const { owner, repo } = context.repo;
            const issueId = context.payload.issue.node_id;
            const projectNumber = 55;  // N√∫mero del proyecto en la organizaci√≥n
            const fieldName = "Start date"; // Nombre del campo a actualizar
            const org = "GovernIB"; // Nombre de la organizaci√≥n

            // Obtener la fecha actual en formato YYYY-MM-DD
            const startDate = new Date().toISOString().split("T")[0];

            console.log(`üîç Buscando el proyecto #${projectNumber} en la organizaci√≥n '${org}'...`);

            // 1Ô∏è‚É£ Obtener el ID del proyecto y sus campos
            const query = `
              query($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }`;

            const variables = { org, projectNumber };
            const result = await github.graphql(query, variables);

            if (!result.organization || !result.organization.projectV2) {
              throw new Error(`‚ùå No se encontr√≥ el proyecto con n√∫mero ${projectNumber} en la organizaci√≥n '${org}'`);
            }

            const projectId = result.organization.projectV2.id;
            console.log(`‚úÖ Proyecto encontrado: ID ${projectId}`);

            // 2Ô∏è‚É£ Buscar el campo "Start date"
            const field = result.organization.projectV2.fields.nodes.find(f => f.name === fieldName);
            if (!field) {
              throw new Error(`‚ùå No se encontr√≥ el campo personalizado: ${fieldName}`);
            }

            const fieldId = field.id;
            console.log(`‚úÖ Campo '${fieldName}' encontrado: ID ${fieldId}`);

            // 3Ô∏è‚É£ Agregar la issue al proyecto si no est√° ya en √©l
            console.log(`üîÑ A√±adiendo la issue ${issueId} al proyecto...`);

            const addItemMutation = `
              mutation($projectId: ID!, $issueId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                  item {
                    id
                  }
                }
              }`;

            const addItemResult = await github.graphql(addItemMutation, { projectId, issueId });
            const itemId = addItemResult.addProjectV2ItemById.item.id;

            console.log(`‚úÖ Issue a√±adida al proyecto: Item ID ${itemId}`);

            // 4Ô∏è‚É£ Actualizar el campo `startDate`
            console.log(`üìù Actualizando el campo '${fieldName}' con la fecha ${startDate}...`);

            const updateFieldMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $startDate: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { text: $startDate }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }`;

            await github.graphql(updateFieldMutation, { projectId, itemId, fieldId, startDate });

            console.log(`‚úÖ Campo '${fieldName}' actualizado con fecha: ${startDate}`);

name: Set or Remove End Date in GitHub Project
on:
  issues:
    types: [opened, edited, reopened]

jobs:
  update-project-end-date:
    runs-on: ubuntu-latest
    steps:
      - name: Set or Remove End Date in GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const { owner, repo } = context.repo;
            const issueId = context.payload.issue.node_id;
            const projectNumber = 55;
            const fieldName = "End date";  
            const org = "GovernIB";  
            const endDate = new Date().toISOString().split("T")[0];

            console.log(`üîç Buscando el proyecto #${projectNumber} en la organizaci√≥n '${org}'...`);

            // 1Ô∏è‚É£ Obtener el ID del proyecto y sus campos
            const query = `
              query($org: String!, $projectNumber: Int!) {
                organization(login: $org) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }`;

            const variables = { org, projectNumber };
            const result = await github.graphql(query, variables);

            if (!result.organization || !result.organization.projectV2) {
              throw new Error(`‚ùå No se encontr√≥ el proyecto con n√∫mero ${projectNumber} en la organizaci√≥n '${org}'`);
            }

            const projectId = result.organization.projectV2.id;
            console.log(`‚úÖ Proyecto encontrado: ID ${projectId}`);

            // 2Ô∏è‚É£ Buscar el campo "End date"
            const field = result.organization.projectV2.fields.nodes.find(f => f.name === fieldName);
            if (!field) {
              throw new Error(`‚ùå No se encontr√≥ el campo personalizado: ${fieldName}`);
            }

            const fieldId = field.id;
            console.log(`‚úÖ Campo '${fieldName}' encontrado: ID ${fieldId}`);

            // 3Ô∏è‚É£ Buscar el item de la issue en el proyecto
            console.log(`üîç Buscando el item de la issue en el proyecto...`);

            const getItemQuery = `
              query($issueId: ID!) {
                node(id: $issueId) {
                  ... on Issue {
                    projectItems(first: 50) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }`;

            const getItemResult = await github.graphql(getItemQuery, { issueId });

            const item = getItemResult.node.projectItems.nodes[0]; // Se asume que la issue solo est√° en un proyecto
            if (!item) {
              throw new Error(`‚ùå No se encontr√≥ la issue en el proyecto.`);
            }

            const itemId = item.id;
            console.log(`‚úÖ Item encontrado en el proyecto: ID ${itemId}`);

            // 4Ô∏è‚É£ Verificar si la issue est√° en estado "closed" (Done) o si se ha movido a otro estado
            const isDone = context.payload.issue.state === "closed";
            const wasDone = context.payload.changes?.state?.from === "closed";

            if (isDone) {
              // Si la issue est√° en "Done", actualizamos el campo End date
              console.log(`üìù Actualizando el campo '${fieldName}' con la fecha ${endDate}...`);

              const updateFieldMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $endDate: Date!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: $endDate }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`;

              await github.graphql(updateFieldMutation, { projectId, itemId, fieldId, endDate: new Date(endDate) });

              console.log(`‚úÖ Campo '${fieldName}' actualizado con fecha: ${endDate}`);
            } else {
              // Si se pas√≥ de "Done" a otro estado, borrar el valor
              console.log(`‚ùå La issue ya no est√° en estado 'Done'. Borrando el campo '${fieldName}'...`);

              const updateFieldMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { date: null }  // Establecer valor nulo para borrar el campo
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`;

              await github.graphql(updateFieldMutation, { projectId, itemId, fieldId });

              console.log(`‚úÖ Campo '${fieldName}' borrado.`);
            }
